Tree
    # A tree is a hierarchical data structure that consists of nodes connected by edges

    # A tree is a non-linear data structure, compared to arrays, linked lists, stacks and queues which are linear data structures.

    # In linear data structures, the time required to search is proportional to the size of the data set.

    # Trees however, owing to the  nonlinear nature allow quicker and easier access to the data.

    # A tree will not contain any loops or cycles.

Tree Usage
    # File systems for directory structure
    # A family tree
    # An organisation tree
    # DOM
    # Chat bots
    # Abstract syntax trees

Tree Terminology
    # Parent node 
        # A node that is immediate predacessor of any node is called a parent node

    # Child node
        # A node that is an immediate successor of a node is called a child node

    # Root node
        # A node from which the tree is originated is called the root node. It doesn't have a parent node.

    # Leaf node
       # nodes which doesn't have any child node.

    # Siblings
       # Child node with the same parent are called siblings.

    # Ancestor node
        # parent's parent node

    # Path
        # Sequence of nodes and edges from one node to another
    
    # Degree
        # The degree of a node is a total number of child nodes it has.

        # The degree of a tree is the maximum degree of a node in the tree.

    # Depth
        # The depth of node is the number of edges from the root to that node.
        # The depth of root node is always zero

    # Height
        # The height of a node is the number of edges from the deepest leaf to that node
        
        # Height of the root node is the height of tree.

@@@
When it comes to trees, you're rarely asked to implement generic tree.

More often or not, interviews are circle around one specific type of tree. Which is the Binary Search Tree.